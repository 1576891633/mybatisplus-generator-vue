package ${pkgPath};

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.github.pagehelper.PageInfo;
import com.github.pagehelper.PageHelper;
import com.kingyon.support.common.exception.ServiceException;

import ${daoPath};
import ${formPath};
import ${queryPath};
import ${modelPath};
import ${servicePath};


@Service
public class ${clzName}ServiceImpl implements I${clzName}Service {

	@Autowired
    private ${clzName}Mapper ${clzNameLC}Mapper;

	/**
	 * 分页查询
	 * @param page 页数
	 * @param size 每页条数
	 * @param sort 排序条件
	 * @param ${clzNameLC} 查询条件
	 * @return
	 */
	@Override
    public PageInfo findByPage(int page, int size,${queryName} ${clzNameLC},String sort){
        PageHelper.startPage(page, size);
        PageHelper.orderBy(sort);
        List<${clzName}> data = ${clzNameLC}Mapper.findAll(${clzNameLC});
        PageInfo info =new PageInfo(data);
        List<${formName}> response =new ArrayList<>();
        data.stream().forEach(item->response.add(new ${formName}(item)));
        info.setList(response);
        return info;
    }

	/**
	 * 分页查询（默认以创建时间倒序）
	 * @param page 页数
	 * @param size 每页条数
	 * @param ${clzNameLC} 查询条件
	 * @return
	 */
	@Override
    public PageInfo findByPage(int page, int size,${queryName} ${clzNameLC}){
        PageHelper.startPage(page, size);
        PageHelper.orderBy("create_date desc");
        List<${clzName}> data = ${clzNameLC}Mapper.findAll(${clzNameLC});
        PageInfo info =new PageInfo(data);
        List<${formName}> response =new ArrayList<>();
        data.stream().forEach(item->response.add(new ${formName}(item)));
        info.setList(response);
        return info;
    }

	/**
	 * 分页查询
	 * @param page 页数
	 * @param size 每页条数
	 * @param sort 排序条件
	 * @return
	 */
	@Override
    public PageInfo findByPage(int page, int size,String sort){
        PageHelper.startPage(page, size);
        PageHelper.orderBy(sort);
        List<${clzName}> data = ${clzNameLC}Mapper.findAll(new ${queryName}());
        PageInfo info =new PageInfo(data);
        List<${formName}> response =new ArrayList<>();
        data.stream().forEach(item->response.add(new ${formName}(item)));
        info.setList(response);
        return info;
    }

	/**
	 * 分页查询（默认以创建时间倒序）
	 * @param page 页数
	 * @param size 每页条数
	 * @return
	 */
	@Override
    public PageInfo findByPage(int page, int size){
        PageHelper.startPage(page, size);
        PageHelper.orderBy("create_date desc");
        List<${clzName}> data = ${clzNameLC}Mapper.findAll(new ${queryName}());
        PageInfo info =new PageInfo(data);
        List<${formName}> response =new ArrayList<>();
        data.stream().forEach(item->response.add(new ${formName}(item)));
        info.setList(response);
        return info;
    }

	/**
	 * 列表查询
	 * @param ${clzNameLC} 查询条件
	 */
	@Override
    public List<${formName}> findAll(${queryName} ${clzNameLC}){
        List<${formName}> response =new ArrayList<>();
        ${clzNameLC}Mapper.findAll(${clzNameLC}).stream().forEach(item->response.add(new ${formName}(item)));
        return response;
    }

	/**
	 * 列表查询
	 */
	@Override
    public List<${formName}> findAll(){
        List<${formName}> response =new ArrayList<>();
        ${clzNameLC}Mapper.findAll(new ${queryName}()).stream().forEach(item->response.add(new ${formName}(item)));
         return response;
    }

	/**
	 * 单个查询
	 */
	@Override
    public ${formName} getById(${parserKeyType} ${parserKey}){
      ${clzName} ${clzNameLC} = ${clzNameLC}Mapper.getById(${parserKey});
        if (${clzNameLC} == null){
            return null;
        }
        return new ${formName}(${clzNameLC});
    }

	/**
	 * 新增
	 * @return 新增id
	 */
	@Override
    public ${parserKeyType} save(${formName} ${clzNameLC}){
        ${clzName} model= ${clzNameLC}.to${clzName}();
        ${clzNameLC}Mapper.save(model);
        return model.getId();
    }

	/**
	 * 修改
	 */
	@Override
    public int update(${formName} ${clzNameLC}){
        if(${clzNameLC}.getId()==null){
            throw new ServiceException("参数错误");
        }
        return ${clzNameLC}Mapper.update(${clzNameLC}.to${clzName}());
    }

	/**
	 * 删除
	 */
	@Override
    public int deleteByIds(${parserKeyType}[] ids){
        return ${clzNameLC}Mapper.deleteByIds(ids);
    }
}
